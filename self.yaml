esphome:
  name: lilygo
  platformio_options:
    # Unless noted otherwise, based on https://github.com/Xinyuan-LilyGO/LilyGo-EPD47/blob/1eb6119fc31fcff7a6bafecb09f4225313859fc5/examples/demo/platformio.ini#L37
    upload_speed: 921600
    monitor_speed: 115200
    board_build.mcu: esp32s3
    board_build.f_cpu: 240000000L
    board_build.arduino.memory_type: qspi_opi
    board_build.flash_size: 16MB
    board_build.flash_mode: qio
    board_build.flash_type: qspi
    board_build.psram_type: opi
    board_build.memory_type: qspi_opi
    board_build.boot_freq: 80m
    platform_packages:
      - "toolchain-riscv32-esp @8.4.0+2021r2-patch5"
    build_flags:  # the first three defines are required for the screen library to function.
      - "-DBOARD_HAS_PSRAM"
      - "-DARDUINO_RUNNING_CORE=0"  # TODO: this conflicts with the value from platformio's idedata, spewing a lot of warnings during the build.
      - "-DARDUINO_EVENT_RUNNING_CORE=0"  # and this too
      # In addition to lilygo's settings:
      # To enable reading logs over USB until `hardware_uart: USB_CDC` support
      # is added to `logger:`, as detailed in <https://github.com/esphome/feature-requests/issues/1906>:
      - "-DARDUINO_USB_MODE=1"
      - "-DARDUINO_USB_CDC_ON_BOOT=1"
  libraries:
    - SPI

esp32:
  variant: esp32s3
  board: esp32-s3-devkitc-1

  framework:
    type: arduino
    # Just like in <https://community.home-assistant.io/t/enable-usb-cdc-to-log-hello-world-to-esp32-s3-dev-board-for-esphome/463164/10>
    # I had problems with newer versions; the following combination happens to work, so using it for now.
    version: 2.0.3
    platform_version: 5.1.1

logger:
  level: VERBOSE
  # hardware_uart: USB_CDC  # see note about <https://github.com/esphome/feature-requests/issues/1906> above

# Enable Home Assistant API
api:  # Set up a key instead: https://community.home-assistant.io/t/2023-2-esphome-deprecated-api-password-how-to-update-to-encryption-key
  password: !secret api_ota_password

ota:
  platform: esphome
  password: !secret api_ota_password

wifi: !include wifi-secrets.yaml

button:
  - platform: restart
    name: "${esp_name} Restart"

  - platform: template
    name: "${esp_name} Refresh"
    icon: "mdi:update"

  - platform: template
    name: "${esp_name} Next Page"
    icon: "mdi:update"
    on_press:
      then:
      - display.page.show_next: t5_display
      - component.update: t5_display

binary_sensor:
  - platform: gpio
    pin: 
      number: GPIO21 #was GPIO39 on the previous board
      inverted: true
    name: "Button 1"
    on_press:
      then:
      - display.page.show_next: t5_display
      - component.update: t5_display
  
  - platform: homeassistant
    id: vac_cleaning
    entity_id: binary_sensor.noonoo2_cleaning

sensor:
  - platform: homeassistant
    entity_id: sensor.woonkamer_temperature
    id: woon_temp
    internal: true

  - platform: homeassistant
    entity_id: sensor.woonkamer_humidity
    id: woon_hum
    internal: true
  
  - platform: homeassistant
    entity_id: sensor.kantoor_temperature
    id: kantoor_temp
    internal: true

  - platform: homeassistant
    entity_id: sensor.kantoor_humidity
    id: kantoor_hum
    internal: true
  
  - platform: homeassistant
    entity_id: sensor.iris_en_ruben_huis_outdoor_temperature
    id: outdoor_temp
    internal: true

  - platform: homeassistant
    entity_id: sensor.noonoo2_cleaning_progress
    id: vac_progress
   
  - platform: homeassistant
    entity_id: sensor.prefix_dev_pixi_stars
    id: pixi_stars

  # Board platform
  - platform: lilygo_t5_47_battery
    id: battery_voltage
    voltage:
      name: "Battery Voltage"

  - platform: template
    name: "Battery Percentage"
    id: battery_percentage
    lambda: |-
      // tweak values in mapping for calibration
      // 4.1 = max voltage
      // 3.3 = min voltage
      float y = (id(battery_voltage).voltage->state - 3.3) * 100.0 / (4.1 - 3.3);
      if (y < 100.0) { return y; } else { return 100.0; };

external_components:
    - source:
        type: local
        path: components/
      components: ["t547", "lilygo_t5_47_battery"]


font:

  - file: "gfonts://Google+Sans"
    id: font_date
    size: 58
  - file: "gfonts://Google+Sans"
    id: font_time
    size: 105
  - file: "gfonts://Google+Sans"
    id: font_15
    size: 15
  - file: "gfonts://Google+Sans"
    id: font_20 
    size: 20
  - file: "gfonts://Google+Sans"
    id: font_40
    size: 40
  - file: "gfonts://Google+Sans"
    id: font_50
    size: 50
  - file: "gfonts://Google+Sans"
    id: font_60
    size: 60


image: 
  - file: "images/bg.png"
    id: bg_image
  - file: "mdi:thermometer"
    id: thermometer
    resize: 60x60
  - file: "mdi:water-percent"
    id: water_percent
    resize: 60x60
  - file: "mdi:star"
    id: star_icon
    resize: 100x100

time:
  - platform: homeassistant
    id: ntp

display:
  - platform: t547
    id: t5_display
    rotation: 270
    update_interval: 30s
    pages:
      - id: main_page
        lambda: |-
          #define xres 540
          #define yres 960

          it.image(0, 0, id(bg_image));

          // Battery level indicator
          it.filled_rectangle(0, 0, id(battery_percentage).state*xres/100, 4);

          // Date and time
          it.strftime(xres/2, 10, id(font_date), TextAlign::TOP_CENTER, "%A %b %d ", id(ntp).now());
          it.strftime(xres/2, 80, id(font_time), TextAlign::TOP_CENTER, "%H:%M", id(ntp).now());

          // Climate house
          # define climate_house_y 650
          it.image(40, climate_house_y, id(thermometer));
          it.printf(100, climate_house_y, id(font_50), "%.1f Â°C", id(woon_temp).state);
          it.image(250, climate_house_y, id(water_percent));
          it.printf(320, climate_house_y, id(font_50), "%.1f %%", id(woon_hum).state);

          // Climate office


          // Climate outdoor

          // GitHub
          // Pixi stars, with icon
          it.print(85, 235, id(font_40), "Pixi");
          it.image(70, 265, id(star_icon));
          it.printf(77, 350, id(font_40), "%.0f", id(pixi_stars).state);

          // Vacuum progress bar
          if (id(vac_cleaning).state) {
            int vac_state = id(vac_progress).state;
            int vac_pose = vac_state*xres/100;
            int vac_width = 50;
            int vac_height = 18;
            int vac_spacing = 6;
          

            // Draw dirt line
            it.filled_rectangle(vac_pose, yres-4, xres, 10);

            // Draw rectangle that represents the Vacuum itself, fitting between the xres and yres limits
            it.filled_rectangle(vac_pose-vac_width/2, yres-vac_height-vac_spacing, vac_width, vac_height);
            it.filled_rectangle(vac_pose-5, yres-vac_height-vac_spacing-4, 10, 4);

            // Draw percentage in vacuum
            it.printf(vac_pose, yres-vac_height-vac_spacing, id(font_15), Color(0, 0, 0), display::TextAlign::TOP_CENTER, "%.0f%%", id(vac_progress).state);
          }

      - id: stats
        lambda: |-
          it.printf(10, 50, id(font_20), "Battery: %.1f% (%.1fV)", id(battery_percentage).state, id(battery_voltage).voltage->state);
